s_sd_of_pfc_semantics 
	=> nrel_main_idtf:
		[Раздел. Предметная область семантики языка PFC]
		(* <- lang_ru;; *);
	=> nrel_idtf:
		[Раздел базы знаний, описывающий Предметную область семантики языка PFC]
		(* <- lang_ru;; *);;


pfc_element
	<- sc_node_not_relation;
	=> nrel_main_idtf:
		[элемент языка PFC]
		(* <- lang_ru;; *);;


allocation_element
	<- sc_node_not_relation;
	=> nrel_main_idtf:
		[элемент размещения ресурсов]
		(* <- lang_ru;; *);;

structural_element
	<- sc_node_not_relation;
	=> nrel_main_idtf:
		[структурный элемент]
		(* <- lang_ru;; *);;

synchronization_element
	<- sc_node_not_relation;
	=> nrel_main_idtf:
		[элемент синхронизации]
		(* <- lang_ru;; *);;

procedural_element
	<- sc_node_not_relation;
	=> nrel_main_idtf:
		[процедурный элемент]
		(* <- lang_ru;; *);;

phase
	<- sc_node_not_relation;
	=> nrel_main_idtf:
		[атомарный процедурный элемент]
		(* <- lang_ru;; *);
	=> nrel_idtf:
		[фаза]
		(* <- lang_ru;; *);;

non_atomic_procedural_element
	<- sc_node_not_relation;
	=> nrel_main_idtf:
		[неатомарный процедурный элемент]
		(* <- lang_ru;; *);;

collapsed_procedural_element
	<- sc_node_not_relation;
	=> nrel_main_idtf:
		[свёрнутый процедурный элемент]
		(* <- lang_ru;; *);;

expanded_procedural_element
	<- sc_node_not_relation;
	=> nrel_main_idtf:
		[развёрнутый процедурный элемент]
		(* <- lang_ru;; *);;

operation
	<- sc_node_not_relation;
	=> nrel_main_idtf:
		[операция]
		(* <- lang_ru;; *);;

unit_procedure
	<- sc_node_not_relation;
	=> nrel_main_idtf:
		[процедура технологической установки]
		(* <- lang_ru;; *);;

procedure_starting
	<- sc_node_not_relation;
	=> nrel_main_idtf:
		[начало выполнения процедуры]
		(* <- lang_ru;; *);;

starting_of_sequence_execution_choice
	<- sc_node_not_relation;
	=> nrel_main_idtf:
		[начало выбора последовательности исполнения]
		(* <- lang_ru;; *);;

starting_of_parallel_sequence_execution
	<- sc_node_not_relation;
	=> nrel_main_idtf:
		[начало параллельного исполнения последовательности]
		(* <- lang_ru;; *);;

procedure_finishing
	<- sc_node_not_relation;
	=> nrel_main_idtf:
		[конец выполнения процедуры]
		(* <- lang_ru;; *);;

finishing_of_sequence_execution_choice
	<- sc_node_not_relation;
	=> nrel_main_idtf:
		[конец выбора последовательности выполнения]
		(* <- lang_ru;; *);;

finishing_of_parallel_sequence_execution
	<- sc_node_not_relation;
	=> nrel_main_idtf:
		[конец параллельного исполнения последовательности]
		(* <- lang_ru;; *);;

recipe_procedure
	<- sc_node_not_relation;
	=> nrel_main_idtf:
		[процедура]
		(* <- lang_ru;; *);;


pfc_relation
	<- sc_node_norole_relation;
	=> nrel_main_idtf:
		[связь языка PFC*]
		(* <- lang_ru;; *);;

nrel_order_of_execution
	<- sc_node_norole_relation;
	=> nrel_main_idtf:
		[порядок выполнения*]
		(* <- lang_ru;; *);;

nrel_synchronization_element_link
	<- sc_node_norole_relation;
	=> nrel_main_idtf:
		[ссылка на элемент синхронизации*]
		(* <- lang_ru;; *);;

nrel_one_way_link
	<- sc_node_norole_relation;
	=> nrel_main_idtf:
		[односторонняя ссылка* ]
		(* <- lang_ru;; *);;

nrel_two_way_link
	<- sc_node_norole_relation;
	=> nrel_main_idtf:
		[двусторонняя ссылка*]
		(* <- lang_ru;; *);;

nrel_transition_condition
	<- sc_node_norole_relation;
	=> nrel_main_idtf:
		[условие перехода*]
		(* <- lang_ru;; *);;

nrel_explicit_transition
	<- sc_node_norole_relation;
	=> nrel_main_idtf:
		[явный переход*]
		(* <- lang_ru;; *);
	=> nrel_idtf:
		[условный переход*]
		(* <- lang_ru;; *);;


nrel_implisit_transition
	<- sc_node_norole_relation;
	=> nrel_main_idtf:
		[неявный переход*]
			(* <- lang_ru;; *);
	=> nrel_idtf:
		[безусловный переход*]
		(* <- lang_ru;; *);;

s_sd_of_pfc_semantics = 
[*
sd_of_pfc_semantics
	=> nrel_main_idtf:
		[Предметная область семантики языка PFC]
		(* <- lang_ru;; *);
	<-subject_domain;
	-> rrel_maximum_studied_object_class: pfc_element;
	-> rrel_explored_relation: pfc_relation;;

pfc_element 
	=> nrel_inclusion: structural_element;
	=> nrel_inclusion: procedural_element;
	<- rrel_key_sc_element:
		...
		(*
		<= nrel_sc_text_translation: 
			...
			(*
			<- explanation;;
			-> rrel_example: 
				[Элемент языка PFC — атомарный элемент текста на языке PFC.]
				(* <- lang_ru;; *);;
		
			*);;
		*);;

structural_element 
	=> nrel_inclusion: allocation_element;
	=> nrel_inclusion: synchronization_element;
	<- rrel_key_sc_element:
		...
		(*
		<= nrel_sc_text_translation: 
			...
			(*
			<- explanation;;
			-> rrel_example: 
				[Структурный элемент — элемент языка PFC, который вместе со множеством процедурных элементов образует диаграмму 				языка PFC.]
				(* <- lang_ru;; *);;
			*);;
		*);;

allocation_element 
	<- rrel_key_sc_element:
		...
		(*
		<= nrel_sc_text_translation: 
			...
			(*
			<- explanation;;
			-> rrel_example: 
				[Элемент размещения ресурсов — структурный элемент языка PFC, указывающий на распределение и согласование 					использования общих ресурсов (сырья, оборудования и др.).]
				(* <- lang_ru;; *);;
			*);;
		*);;

synchronization_element 
	<- rrel_key_sc_element:
		...
		(*
		<= nrel_sc_text_translation: 
			...
			(*
			<- explanation;;
			-> rrel_example: 
				[Элемент синхронизации — структурный элемент языка PFC, обозначающий точку отправления или прибытия при 				движения продукта от одного процедурного элемента к другому, или просто процедурный элемент, выполнение 				которого опосредованно зависит от выполнения другого процедурного элемента.]
				(* <- lang_ru;; *);;
			*);;
		*);;

procedural_element
	<= nrel_subdividing:
	... 
	(*
	-> phase;
	non_atomic_procedural_element;;
	*);
	<- rrel_key_sc_element:
		...
		(*
		<= nrel_sc_text_translation: 
			...
			(*
			<- explanation;;
			-> rrel_example: 
				[Процедурный элемент — элемент процедурной иерархии.]
				(* <- lang_ru;; *);;
			*);;
		*);;

phase
	<- rrel_key_sc_element:
		...
		(*
		<= nrel_sc_text_translation: 
			...
			(*
			<- explanation;;
			-> rrel_example: 
				[Атомарный процедурный элемент — процедурный элемент, который не содержит внутри себя другие процедурные 					элементы.]
				(* <- lang_ru;; *);;
			*);;
		*);;

non_atomic_procedural_element
	<= nrel_subdividing:
	... 
	(*
	-> collapsed_procedural_element;
	expanded_procedural_element;;
	*);
	=> nrel_inclusion: operation;
	=> nrel_inclusion: unit_procedure;
	=> nrel_inclusion: recipe_procedure;
	<- rrel_key_sc_element:
		...
		(*
		<= nrel_sc_text_translation: 
			...
			(*
			<- explanation;;
			-> rrel_example: 
				[Неатомарный процедурный элемент — процедурный элемент, который содержит внутри себя другие процедурные 				элементы.]
				(* <- lang_ru;; *);;
			*);;
		*);;

collapsed_procedural_element
	<- rrel_key_sc_element:
		...
		(*
		<= nrel_sc_text_translation: 
			...
			(*
			<- explanation;;
			-> rrel_example: 
				[Свёрнутый процедурный элемент — такое состояние процедурного элемента, когда его содержимое не указано явно на 				диаграмме.]
				(* <- lang_ru;; *);;
			*);;
		*);;

expanded_procedural_element
	<- rrel_key_sc_element:
		...
		(*
		<= nrel_sc_text_translation: 
			...
			(*
			<- explanation;;
			-> rrel_example: 
				[Развёрнутый процедурный элемент — такое состояние процедурного элемента, когда его содержимое указано явно в 					виде совокупности процедурных элементов и связей между ними.]
				(* <- lang_ru;; *);;
			*);;
		*);;

operation
	<- rrel_key_sc_element:
		...
		(*
		<= nrel_sc_text_translation: 
			...
			(*
			<- explanation;;
			-> rrel_example: 
				[Операция — второй уровень процедурной иерархии.]
				(* <- lang_ru;; *);;
			*);;
		*);;

unit_procedure
	<- rrel_key_sc_element:
		...
		(*
		<= nrel_sc_text_translation: 
			...
			(*
			<- explanation;;
			-> rrel_example: 
				[Процедура технологической установки — третий уровень процедурной иерархии.]
				(* <- lang_ru;; *);;
			*);;
		*);;

recipe_procedure
	<- rrel_key_sc_element:
		...
		(*
		<= nrel_sc_text_translation: 
			...
			(*
			<- explanation;;
			-> rrel_example: 
				[Процедура — наивысший (четвёртый) уровень процедурной иерархии.]
				(* <- lang_ru;; *);;
			*);;
		*);;

procedure_starting
	<- rrel_key_sc_element:
		...
		(*
		<= nrel_sc_text_translation: 
			...
			(*
			<- explanation;;
			-> rrel_example: 
				[Начало выполнения процедуры — каждый элемент множества начала выполнения процедуры представляет собой класс 					временных сущностей, у которых совпадает момент начала выполнения процедурного элемента.]
				(* <- lang_ru;; *);;
			*);;
		*);;

starting_of_sequence_execution_choice
	<- rrel_key_sc_element:
		...
		(*
		<= nrel_sc_text_translation: 
			...
			(*
			<- explanation;;
			-> rrel_example: 
				[Начало выбора последовательности исполнения — каждый элемент множества начало выбора последовательности 					выполнения представляет собой класс временных сущностей, у которых совпадает момент начала выбора одной из 					ветвей исполнения процедурного элемента.]
				(* <- lang_ru;; *);;
			*);;
		*);;

starting_of_parallel_sequence_execution
	<- rrel_key_sc_element:
		...
		(*
		<= nrel_sc_text_translation: 
			...
			(*
			<- explanation;;
			-> rrel_example: 
				[Начало параллельного выполнения последовательности — каждый элемент множества начало параллельного выполнения 					последовательности представляет собой класс временных сущностей, у которых совпадает момент начала 					параллельного исполнения множества процедурных элементов.]
				(* <- lang_ru;; *);;
			*);;
		*);;

procedure_finishing
	<- rrel_key_sc_element:
		...
		(*
		<= nrel_sc_text_translation: 
			...
			(*
			<- explanation;;
			-> rrel_example: 
				[Конец выполнения процедуры — каждый элемент множества конец выполнения процедуры представляет собой класс 					временных сущностей, у которых совпадает момент конца выполнения процедурного элемента.]
				(* <- lang_ru;; *);;
			*);;
		*);;

finishing_of_sequence_execution_choice
	<- rrel_key_sc_element:
		...
		(*
		<= nrel_sc_text_translation: 
			...
			(*
			<- explanation;;
			-> rrel_example: 
				[Конец выбора последовательности выполнения — каждый элемент множества конец выбора последовательности 					выполнения представляет собой класс временных сущностей, у которых совпадает момент конца выполнения одной из 					выбранных ветвей исполнения процедурного элемента.]
				(* <- lang_ru;; *);;
			*);;
		*);;

finishing_of_parallel_sequence_execution
	<- rrel_key_sc_element:
		...
		(*
		<= nrel_sc_text_translation: 
			...
			(*
			<- explanation;;
			-> rrel_example: 
				[Конец параллельного исполнения последовательности — каждый элемент множества конец параллельного исполнения 					последовательности представляет собой класс временных сущностей, у которых совпадает момент конца параллельного 				исполнения множества процедурных элементов.]
				(* <- lang_ru;; *);;
			*);;
		*);;

pfc_relation
	=> nrel_inclusion: nrel_order_of_execution;
	=> nrel_inclusion: nrel_synchronization_element_link;
	<- rrel_key_sc_element:
		...
		(*
		<= nrel_sc_text_translation: 
			...
			(*
			<- explanation;;
			-> rrel_example: 
				[Связь языка PFC* — бинарное отношение, элементами связки которого являются элементы языка PFC.]
				(* <- lang_ru;; *);;
			*);;
		*);;

nrel_order_of_execution
	<= nrel_subdividing:
	... 
	(*
	-> nrel_explicit_transition;
	nrel_implisit_transition;;
	*);
	<- rrel_key_sc_element:
		...
		(*
		<= nrel_sc_text_translation: 
			...
			(*
			<- explanation;;
			-> rrel_example: 
				[Порядок выполнения* — бинарное отношение, первым элементом связки которого является элемент языка PFC, который 				должен быть выполнен раньше элемента языка PFC, находящегося на месте второго элемента связки.]
				(* <- lang_ru;; *);;
			*);;
		*);;

nrel_implisit_transition
	<- rrel_key_sc_element:
		...
		(*
		<= nrel_sc_text_translation: 
			...
			(*
			<- explanation;;
			-> rrel_example: 
				[Неявный переход* — бинарное отношение, первым компонентом связки которого является процедурный элемент, после 					выполнения которого начнётся выполнение процедурного элемента, являющегося вторым компонентом связки отношения.]
				(* <- lang_ru;; *);;
			*);;
		*);;

nrel_explicit_transition
	<- rrel_key_sc_element:
		...
		(*
		<= nrel_sc_text_translation: 
			...
			(*
			<- explanation;;
			-> rrel_example: 
				[Явный переход* — бинарное отношение, вторым компонентом связки которого является процедурный элемент, 					выполнение которого начнётся после выполнения процедурного элемента, являющегося первым компонентом связки и 					проверки некоторого условия.]
				(* <- lang_ru;; *);;
			*);;
		*);;

nrel_synchronization_element_link
	=> nrel_inclusion: nrel_one_way_link;
	=> nrel_inclusion: nrel_two_way_link;
	<- rrel_key_sc_element:
		...
		(*
		<= nrel_sc_text_translation: 
			...
			(*
			<- explanation;;
			-> rrel_example: 
				[Ссылка на элемент синхронизации* — бинарное отношение, компонентами связок которого являются знаки элементов 					синхронизации.]
				(* <- lang_ru;; *);;
			*);;
		*);;

nrel_one_way_link
	<- rrel_key_sc_element:
		...
		(*
		<= nrel_sc_text_translation: 
			...
			(*
			<- explanation;;
			-> rrel_example: 
				[Односторонняя ссылка* — бинарное ориентированное отношение, первым компонентом связки которого является знак 					элемента синхронизации, со стороны которого осуществляется осуществляется передача материала, вторым - знак 					элемента синхронизации, принимающего этот материал.]
				(* <- lang_ru;; *);;
			*);;
		*);;

nrel_two_way_link
	<- rrel_key_sc_element:
		...
		(*
		<= nrel_sc_text_translation: 
			...
			(*
			<- explanation;;
			-> rrel_example: 
				[Двусторонняя ссылка* — бинарное неориентированное отношение, компонентами связок которого являются элементы 					синхронизации, осуществляющие одновременно передачу и приёмку материала.]
				(* <- lang_ru;; *);;
			*);;
		*);;

nrel_transition_condition
	<- rrel_key_sc_element:
		...
		(*
		<= nrel_sc_text_translation: 
			...
			(*
			<- explanation;;
			-> rrel_example: 
				[Условие перехода* — бинарное отношение, первым компонентом связок которого является связка отношения явный 					переход*, вторым - знак структуры, содержащей ожидаемый результат выполнения процедуры.]
				(* <- lang_ru;; *);;
			*);;
		*);;

*];;